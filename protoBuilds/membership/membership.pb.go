// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: membership.proto

package membershippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of a member as understood locally
type MemberState int32

const (
	MemberState_MEMBER_STATE_UNSPECIFIED MemberState = 0
	MemberState_ALIVE                    MemberState = 1
	MemberState_LEFT                     MemberState = 2
	MemberState_FAULTY                   MemberState = 3 // confirmed failed (post-suspicion/timeout)
)

// Enum value maps for MemberState.
var (
	MemberState_name = map[int32]string{
		0: "MEMBER_STATE_UNSPECIFIED",
		1: "ALIVE",
		2: "LEFT",
		3: "FAULTY",
	}
	MemberState_value = map[string]int32{
		"MEMBER_STATE_UNSPECIFIED": 0,
		"ALIVE":                    1,
		"LEFT":                     2,
		"FAULTY":                   3,
	}
)

func (x MemberState) Enum() *MemberState {
	p := new(MemberState)
	*p = x
	return p
}

func (x MemberState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberState) Descriptor() protoreflect.EnumDescriptor {
	return file_membership_proto_enumTypes[0].Descriptor()
}

func (MemberState) Type() protoreflect.EnumType {
	return &file_membership_proto_enumTypes[0]
}

func (x MemberState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberState.Descriptor instead.
func (MemberState) EnumDescriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{0}
}

// Logical type of the payload
type Envelope_MessageType int32

const (
	Envelope_MESSAGE_TYPE_UNSPECIFIED Envelope_MessageType = 0
	Envelope_JOIN                     Envelope_MessageType = 1
	Envelope_JOIN_ACK                 Envelope_MessageType = 2
	Envelope_UPDATE_BATCH             Envelope_MessageType = 3 // Future extensions (not used in the minimal base): HEARTBEAT = 10; PING = 11; ACK = 12;
)

// Enum value maps for Envelope_MessageType.
var (
	Envelope_MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "JOIN",
		2: "JOIN_ACK",
		3: "UPDATE_BATCH",
	}
	Envelope_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"JOIN":                     1,
		"JOIN_ACK":                 2,
		"UPDATE_BATCH":             3,
	}
)

func (x Envelope_MessageType) Enum() *Envelope_MessageType {
	p := new(Envelope_MessageType)
	*p = x
	return p
}

func (x Envelope_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Envelope_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_membership_proto_enumTypes[1].Descriptor()
}

func (Envelope_MessageType) Type() protoreflect.EnumType {
	return &file_membership_proto_enumTypes[1]
}

func (x Envelope_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Envelope_MessageType.Descriptor instead.
func (Envelope_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{3, 0}
}

// A unique node identity in fail-stop model: (ip, port, incarnation)
type NodeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                    // IPv4 or IPv6 string
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`               // UDP port
	Incarnation   uint64                 `protobuf:"varint,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"` // strictly increasing per rejoin (e.g., unix ms)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeID) Reset() {
	*x = NodeID{}
	mi := &file_membership_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeID) ProtoMessage() {}

func (x *NodeID) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeID.ProtoReflect.Descriptor instead.
func (*NodeID) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{0}
}

func (x *NodeID) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeID) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeID) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

// A membership entry suitable for dissemination/piggyback
type MembershipEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *NodeID                `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	State         MemberState            `protobuf:"varint,2,opt,name=state,proto3,enum=membership.MemberState" json:"state,omitempty"`
	Incarnation   uint64                 `protobuf:"varint,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`                         // copy for convenience during merges
	LastUpdateMs  uint64                 `protobuf:"varint,4,opt,name=last_update_ms,json=lastUpdateMs,proto3" json:"last_update_ms,omitempty"` // sender's timestamp (ms) when this update was produced
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipEntry) Reset() {
	*x = MembershipEntry{}
	mi := &file_membership_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipEntry) ProtoMessage() {}

func (x *MembershipEntry) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipEntry.ProtoReflect.Descriptor instead.
func (*MembershipEntry) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{1}
}

func (x *MembershipEntry) GetNode() *NodeID {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *MembershipEntry) GetState() MemberState {
	if x != nil {
		return x.State
	}
	return MemberState_MEMBER_STATE_UNSPECIFIED
}

func (x *MembershipEntry) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *MembershipEntry) GetLastUpdateMs() uint64 {
	if x != nil {
		return x.LastUpdateMs
	}
	return 0
}

// A batch of membership entries for piggyback/dissemination
type UpdateBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*MembershipEntry     `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBatch) Reset() {
	*x = UpdateBatch{}
	mi := &file_membership_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBatch) ProtoMessage() {}

func (x *UpdateBatch) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBatch.ProtoReflect.Descriptor instead.
func (*UpdateBatch) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBatch) GetEntries() []*MembershipEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Envelope wraps all messages for routing and evolution
type Envelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Wire protocol version for compatibility management
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Who sent this message
	Sender *NodeID              `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Type   Envelope_MessageType `protobuf:"varint,3,opt,name=type,proto3,enum=membership.Envelope_MessageType" json:"type,omitempty"`
	// For matching request/response pairs if needed (e.g., Join/JoinAck)
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Oneof payloads
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_Join
	//	*Envelope_JoinAck
	//	*Envelope_UpdateBatch
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_membership_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{3}
}

func (x *Envelope) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Envelope) GetSender() *NodeID {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Envelope) GetType() Envelope_MessageType {
	if x != nil {
		return x.Type
	}
	return Envelope_MESSAGE_TYPE_UNSPECIFIED
}

func (x *Envelope) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetJoin() *Join {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_Join); ok {
			return x.Join
		}
	}
	return nil
}

func (x *Envelope) GetJoinAck() *JoinAck {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_JoinAck); ok {
			return x.JoinAck
		}
	}
	return nil
}

func (x *Envelope) GetUpdateBatch() *UpdateBatch {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_UpdateBatch); ok {
			return x.UpdateBatch
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_Join struct {
	Join *Join `protobuf:"bytes,10,opt,name=join,proto3,oneof"`
}

type Envelope_JoinAck struct {
	JoinAck *JoinAck `protobuf:"bytes,11,opt,name=join_ack,json=joinAck,proto3,oneof"`
}

type Envelope_UpdateBatch struct {
	UpdateBatch *UpdateBatch `protobuf:"bytes,12,opt,name=update_batch,json=updateBatch,proto3,oneof"`
}

func (*Envelope_Join) isEnvelope_Payload() {}

func (*Envelope_JoinAck) isEnvelope_Payload() {}

func (*Envelope_UpdateBatch) isEnvelope_Payload() {}

// A node asks to join; introducer can be contacted via well-known addr
type Join struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *NodeID                `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`                    // joining node's identity
	SentMs        uint64                 `protobuf:"varint,2,opt,name=sent_ms,json=sentMs,proto3" json:"sent_ms,omitempty"` // sender clock in ms (diagnostics)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Join) Reset() {
	*x = Join{}
	mi := &file_membership_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{4}
}

func (x *Join) GetNode() *NodeID {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Join) GetSentMs() uint64 {
	if x != nil {
		return x.SentMs
	}
	return 0
}

// Introducer (or any acceptor) returns initial snapshot and acks join
type JoinAck struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Node               *NodeID                `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`                                                       // the node being acknowledged (echo)
	MembershipSnapshot []*MembershipEntry     `protobuf:"bytes,2,rep,name=membership_snapshot,json=membershipSnapshot,proto3" json:"membership_snapshot,omitempty"` // initial view
	SentMs             uint64                 `protobuf:"varint,3,opt,name=sent_ms,json=sentMs,proto3" json:"sent_ms,omitempty"`                                    // sender clock in ms
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JoinAck) Reset() {
	*x = JoinAck{}
	mi := &file_membership_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinAck) ProtoMessage() {}

func (x *JoinAck) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinAck.ProtoReflect.Descriptor instead.
func (*JoinAck) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{5}
}

func (x *JoinAck) GetNode() *NodeID {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *JoinAck) GetMembershipSnapshot() []*MembershipEntry {
	if x != nil {
		return x.MembershipSnapshot
	}
	return nil
}

func (x *JoinAck) GetSentMs() uint64 {
	if x != nil {
		return x.SentMs
	}
	return 0
}

var File_membership_proto protoreflect.FileDescriptor

const file_membership_proto_rawDesc = "" +
	"\n" +
	"\x10membership.proto\x12\n" +
	"membership\"N\n" +
	"\x06NodeID\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12 \n" +
	"\vincarnation\x18\x03 \x01(\x04R\vincarnation\"\xb0\x01\n" +
	"\x0fMembershipEntry\x12&\n" +
	"\x04node\x18\x01 \x01(\v2\x12.membership.NodeIDR\x04node\x12-\n" +
	"\x05state\x18\x02 \x01(\x0e2\x17.membership.MemberStateR\x05state\x12 \n" +
	"\vincarnation\x18\x03 \x01(\x04R\vincarnation\x12$\n" +
	"\x0elast_update_ms\x18\x04 \x01(\x04R\flastUpdateMs\"D\n" +
	"\vUpdateBatch\x125\n" +
	"\aentries\x18\x01 \x03(\v2\x1b.membership.MembershipEntryR\aentries\"\x9f\x03\n" +
	"\bEnvelope\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12*\n" +
	"\x06sender\x18\x02 \x01(\v2\x12.membership.NodeIDR\x06sender\x124\n" +
	"\x04type\x18\x03 \x01(\x0e2 .membership.Envelope.MessageTypeR\x04type\x12\x1d\n" +
	"\n" +
	"request_id\x18\x04 \x01(\tR\trequestId\x12&\n" +
	"\x04join\x18\n" +
	" \x01(\v2\x10.membership.JoinH\x00R\x04join\x120\n" +
	"\bjoin_ack\x18\v \x01(\v2\x13.membership.JoinAckH\x00R\ajoinAck\x12<\n" +
	"\fupdate_batch\x18\f \x01(\v2\x17.membership.UpdateBatchH\x00R\vupdateBatch\"U\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04JOIN\x10\x01\x12\f\n" +
	"\bJOIN_ACK\x10\x02\x12\x10\n" +
	"\fUPDATE_BATCH\x10\x03B\t\n" +
	"\apayload\"G\n" +
	"\x04Join\x12&\n" +
	"\x04node\x18\x01 \x01(\v2\x12.membership.NodeIDR\x04node\x12\x17\n" +
	"\asent_ms\x18\x02 \x01(\x04R\x06sentMs\"\x98\x01\n" +
	"\aJoinAck\x12&\n" +
	"\x04node\x18\x01 \x01(\v2\x12.membership.NodeIDR\x04node\x12L\n" +
	"\x13membership_snapshot\x18\x02 \x03(\v2\x1b.membership.MembershipEntryR\x12membershipSnapshot\x12\x17\n" +
	"\asent_ms\x18\x03 \x01(\x04R\x06sentMs*L\n" +
	"\vMemberState\x12\x1c\n" +
	"\x18MEMBER_STATE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05ALIVE\x10\x01\x12\b\n" +
	"\x04LEFT\x10\x02\x12\n" +
	"\n" +
	"\x06FAULTY\x10\x03B,Z*DS_MP2/protoBuilds/membership;membershippbb\x06proto3"

var (
	file_membership_proto_rawDescOnce sync.Once
	file_membership_proto_rawDescData []byte
)

func file_membership_proto_rawDescGZIP() []byte {
	file_membership_proto_rawDescOnce.Do(func() {
		file_membership_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_membership_proto_rawDesc), len(file_membership_proto_rawDesc)))
	})
	return file_membership_proto_rawDescData
}

var file_membership_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_membership_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_membership_proto_goTypes = []any{
	(MemberState)(0),          // 0: membership.MemberState
	(Envelope_MessageType)(0), // 1: membership.Envelope.MessageType
	(*NodeID)(nil),            // 2: membership.NodeID
	(*MembershipEntry)(nil),   // 3: membership.MembershipEntry
	(*UpdateBatch)(nil),       // 4: membership.UpdateBatch
	(*Envelope)(nil),          // 5: membership.Envelope
	(*Join)(nil),              // 6: membership.Join
	(*JoinAck)(nil),           // 7: membership.JoinAck
}
var file_membership_proto_depIdxs = []int32{
	2,  // 0: membership.MembershipEntry.node:type_name -> membership.NodeID
	0,  // 1: membership.MembershipEntry.state:type_name -> membership.MemberState
	3,  // 2: membership.UpdateBatch.entries:type_name -> membership.MembershipEntry
	2,  // 3: membership.Envelope.sender:type_name -> membership.NodeID
	1,  // 4: membership.Envelope.type:type_name -> membership.Envelope.MessageType
	6,  // 5: membership.Envelope.join:type_name -> membership.Join
	7,  // 6: membership.Envelope.join_ack:type_name -> membership.JoinAck
	4,  // 7: membership.Envelope.update_batch:type_name -> membership.UpdateBatch
	2,  // 8: membership.Join.node:type_name -> membership.NodeID
	2,  // 9: membership.JoinAck.node:type_name -> membership.NodeID
	3,  // 10: membership.JoinAck.membership_snapshot:type_name -> membership.MembershipEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_membership_proto_init() }
func file_membership_proto_init() {
	if File_membership_proto != nil {
		return
	}
	file_membership_proto_msgTypes[3].OneofWrappers = []any{
		(*Envelope_Join)(nil),
		(*Envelope_JoinAck)(nil),
		(*Envelope_UpdateBatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_membership_proto_rawDesc), len(file_membership_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_membership_proto_goTypes,
		DependencyIndexes: file_membership_proto_depIdxs,
		EnumInfos:         file_membership_proto_enumTypes,
		MessageInfos:      file_membership_proto_msgTypes,
	}.Build()
	File_membership_proto = out.File
	file_membership_proto_goTypes = nil
	file_membership_proto_depIdxs = nil
}
